generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  emailVerified       DateTime?
  name                String?
  image               String?
  role                UserRole  @default(PILGRIM)
  hashedPassword      String?
  garminEmail         String?
  garminPasswordHash  String?
  journalSlug         String?   @unique
  journalTitle        String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  accounts            Account[]
  entries             Entry[]
  sessions            Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Entry {
  id                     String      @id @default(cuid())
  userId                 String
  dayNumber              Int
  date                   DateTime
  title                  String?
  location               String
  content                String
  isPrivate              Boolean     @default(false)
  isDraft                Boolean     @default(false)
  googlePhotosAlbumUrl   String?
  albumCoverImageUrl     String?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  user                   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  gpsData                GPSData?
  photos                 Photo[]

  @@map("entries")
}

model Photo {
  id        String   @id @default(cuid())
  entryId   String
  blobUrl   String
  filename  String
  isHero    Boolean  @default(false)
  createdAt DateTime @default(now())
  entry     Entry    @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@map("photos")
}

model GPSData {
  id                 String    @id @default(cuid())
  entryId            String    @unique
  startLocation      String
  endLocation        String
  distanceKm         Float?
  elevationGainM     Int?
  durationMinutes    Int?
  averageSpeedKmh    Float?
  startTime          DateTime?
  endTime            DateTime?
  calories           Int?
  averageHeartRate   Int?
  maxHeartRate       Int?
  source             String?
  externalActivityId String?
  externalUrl        String?
  rawData            String?
  stravaActivityId   String?
  createdAt          DateTime  @default(now())
  entry              Entry     @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@map("gps_data")
}


enum UserRole {
  PILGRIM
  FAMILY
}
