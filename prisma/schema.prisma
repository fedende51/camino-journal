// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Users table (NextAuth.js compatible)
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          UserRole  @default(PILGRIM)
  hashedPassword String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth.js relations
  accounts Account[]
  sessions Session[]
  
  // App relations
  entries Entry[]

  @@map("users")
}

// NextAuth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth.js VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum UserRole {
  PILGRIM
  FAMILY
}

// Journal Entries table
model Entry {
  id         String   @id @default(cuid())
  userId     String
  dayNumber  Int
  date       DateTime
  title      String?
  location   String
  content    String
  isPrivate  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos     Photo[]
  audioFiles AudioFile[]
  gpsData    GPSData?

  @@map("entries")
}

// Photos table
model Photo {
  id        String   @id @default(cuid())
  entryId   String
  blobUrl   String
  filename  String
  isHero    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  entry Entry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@map("photos")
}

// GPS Data table
model GPSData {
  id               String  @id @default(cuid())
  entryId          String  @unique
  startLocation    String
  endLocation      String
  distanceKm       Float?
  elevationGainM   Int?
  durationMinutes  Int?
  stravaActivityId String?
  createdAt        DateTime @default(now())

  // Relations
  entry Entry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@map("gps_data")
}

// Audio Files table
model AudioFile {
  id            String   @id @default(cuid())
  entryId       String
  blobUrl       String
  filename      String
  transcription String?
  processed     Boolean  @default(false)
  createdAt     DateTime @default(now())

  // Relations
  entry Entry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@map("audio_files")
}
